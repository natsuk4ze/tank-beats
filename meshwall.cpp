//=============================================================================
//
// ÔøΩÔøΩÔøΩbÔøΩVÔøΩÔøΩÔøΩ«ÇÃèÔøΩÔøΩÔøΩ [meshwall.cpp]
// Author : natsuk4ze
//
//=============================================================================
#include "meshwall.h"
#include "input.h"
#include "field.h"

//*****************************************************************************
// ÔøΩ}ÔøΩNÔøΩÔøΩÔøΩÔøΩ`
//*****************************************************************************
#define	MAX_MESH_WALL		(8)			// ÔøΩ«ÇÃëÔøΩÔøΩÔøΩ
#define	TEXTURE_FILENAME	"data/TEXTURE/bg003.png"	// ÔøΩ«Ç›çÔøΩÔøΩﬁÉeÔøΩNÔøΩXÔøΩ`ÔøΩÔøΩÔøΩtÔøΩ@ÔøΩCÔøΩÔøΩÔøΩÔøΩ
#define	VALUE_MOVE_WALL		(5.0f)						// ÔøΩ⁄ìÔøΩÔøΩÔøΩÔøΩx
#define	VALUE_ROTATE_WALL	(D3DX_PI * 0.001f)			// ÔøΩÔøΩ]ÔøΩÔøΩÔøΩx

//*****************************************************************************
// ÔøΩOÔøΩÔøΩÔøΩ[ÔøΩoÔøΩÔøΩÔøΩœêÔøΩ
//*****************************************************************************
LPDIRECT3DTEXTURE9 g_pD3DTexture = NULL;	// ÔøΩeÔøΩNÔøΩXÔøΩ`ÔøΩÔøΩÔøΩ«Ç›çÔøΩÔøΩ›èÍèä

typedef struct
{
	LPDIRECT3DVERTEXBUFFER9 pD3DVtxBuff;	// ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩCÔøΩÔøΩÔøΩ^ÔøΩ[ÔøΩtÔøΩFÔøΩ[ÔøΩXÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^
	LPDIRECT3DINDEXBUFFER9 pD3DIdxBuff;		// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩCÔøΩÔøΩÔøΩ^ÔøΩ[ÔøΩtÔøΩFÔøΩ[ÔøΩXÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^

	D3DXMATRIX mtxWorld;					// ÔøΩÔøΩÔøΩ[ÔøΩÔøΩÔøΩhÔøΩ}ÔøΩgÔøΩÔøΩÔøΩbÔøΩNÔøΩX
	D3DXVECTOR3 pos;						// ÔøΩ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩ\ÔøΩÔøΩÔøΩ íuÔøΩÃíÔøΩÔøΩSÔøΩÔøΩÔøΩW
	D3DXVECTOR3 rot;						// ÔøΩ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩÃâÔøΩ]ÔøΩp
	int nNumBlockX, nNumBlockY;				// ÔøΩuÔøΩÔøΩÔøΩbÔøΩNÔøΩÔøΩ
	int nNumVertex;							// ÔøΩÔøΩÔøΩÔøΩÔøΩ_ÔøΩÔøΩ	
	int nNumVertexIndex;					// ÔøΩÔøΩÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩÔøΩ
	int nNumPolygon;						// ÔøΩÔøΩÔøΩ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩÔøΩ
	float fBlockSizeX, fBlockSizeY;			// ÔøΩuÔøΩÔøΩÔøΩbÔøΩNÔøΩTÔøΩCÔøΩY
} MESH_WALL;

MESH_WALL g_aMeshWall[MAX_MESH_WALL];		// ÔøΩÔøΩÔøΩbÔøΩVÔøΩÔøΩÔøΩ«ÉÔøΩÔøΩ[ÔøΩN
int g_nNumMeshField = 0;					// ÔøΩÔøΩÔøΩbÔøΩVÔøΩÔøΩÔøΩ«ÇÃêÔøΩ

//=============================================================================
// ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
//=============================================================================
HRESULT InitMeshWall(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXCOLOR col,
	int nNumBlockX, int nNumBlockY, float fBlockSizeX, float fBlockSizeY)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();
	MESH_WALL *pMesh;

	if (g_nNumMeshField >= MAX_MESH_WALL)
	{
		return E_FAIL;
	}

	// ÔøΩeÔøΩNÔøΩXÔøΩ`ÔøΩÔøΩÔøΩÃì«Ç›çÔøΩÔøΩÔøΩ
	if (!g_pD3DTexture)
	{
		D3DXCreateTextureFromFile(pDevice,					// ÔøΩfÔøΩoÔøΩCÔøΩXÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^
			TEXTURE_FILENAME,		// ÔøΩtÔøΩ@ÔøΩCÔøΩÔøΩÔøΩÃñÔøΩÔøΩO
			&g_pD3DTexture);		// ÔøΩ«Ç›çÔøΩÔøΩﬁÉÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ[
	}

	pMesh = &g_aMeshWall[g_nNumMeshField];
	g_nNumMeshField++;

	// ÔøΩ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩ\ÔøΩÔøΩÔøΩ íuÔøΩÃíÔøΩÔøΩSÔøΩÔøΩÔøΩWÔøΩÔøΩ›íÔøΩ
	pMesh->pos = pos;

	pMesh->rot = rot;

	// ÔøΩuÔøΩÔøΩÔøΩbÔøΩNÔøΩÔøΩÔøΩÃê›íÔøΩ
	pMesh->nNumBlockX = nNumBlockX;
	pMesh->nNumBlockY = nNumBlockY;

	// ÔøΩÔøΩÔøΩ_ÔøΩÔøΩÔøΩÃê›íÔøΩ
	pMesh->nNumVertex = (nNumBlockX + 1) * (nNumBlockY + 1);

	// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩÔøΩÔøΩÃê›íÔøΩ
	pMesh->nNumVertexIndex = (nNumBlockX + 1) * 2 * nNumBlockY + (nNumBlockY - 1) * 2;

	// ÔøΩ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩÔøΩÔøΩÃê›íÔøΩ
	pMesh->nNumPolygon = nNumBlockX * nNumBlockY * 2 + (nNumBlockY - 1) * 4;

	// ÔøΩuÔøΩÔøΩÔøΩbÔøΩNÔøΩTÔøΩCÔøΩYÔøΩÃê›íÔøΩ
	pMesh->fBlockSizeX = fBlockSizeX;
	pMesh->fBlockSizeY = fBlockSizeY;

	// ÔøΩIÔøΩuÔøΩWÔøΩFÔøΩNÔøΩgÔøΩÃíÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩê∂êÔøΩ
	if (FAILED(pDevice->CreateVertexBuffer(sizeof(VERTEX_3D) * pMesh->nNumVertex,	// ÔøΩÔøΩÔøΩ_ÔøΩfÔøΩ[ÔøΩ^ÔøΩpÔøΩ…ämÔøΩ€ÇÔøΩÔøΩÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩTÔøΩCÔøΩY(ÔøΩoÔøΩCÔøΩgÔøΩPÔøΩÔøΩ)
		D3DUSAGE_WRITEONLY,					// ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÃégÔøΩpÔøΩ@ÔøΩ@
		FVF_VERTEX_3D,						// ÔøΩgÔøΩpÔøΩÔøΩÔøΩÈí∏ÔøΩ_ÔøΩtÔøΩHÔøΩ[ÔøΩ}ÔøΩbÔøΩg
		D3DPOOL_MANAGED,					// ÔøΩÔøΩÔøΩ\ÔøΩ[ÔøΩXÔøΩÃÉoÔøΩbÔøΩtÔøΩ@ÔøΩÔøΩ€éÔøΩÔøΩÔøΩÔøΩÈÉÅÔøΩÔøΩÔøΩÔøΩÔøΩNÔøΩÔøΩÔøΩXÔøΩÔøΩÔøΩwÔøΩÔøΩ
		&pMesh->pD3DVtxBuff,				// ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩCÔøΩÔøΩÔøΩ^ÔøΩ[ÔøΩtÔøΩFÔøΩ[ÔøΩXÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^
		NULL)))								// NULLÔøΩ…ê›íÔøΩ
	{
		return E_FAIL;
	}

	// ÔøΩIÔøΩuÔøΩWÔøΩFÔøΩNÔøΩgÔøΩÃÉCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩê∂êÔøΩ
	if (FAILED(pDevice->CreateIndexBuffer(sizeof(WORD) * pMesh->nNumVertexIndex,		// ÔøΩÔøΩÔøΩ_ÔøΩfÔøΩ[ÔøΩ^ÔøΩpÔøΩ…ämÔøΩ€ÇÔøΩÔøΩÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩTÔøΩCÔøΩY(ÔøΩoÔøΩCÔøΩgÔøΩPÔøΩÔøΩ)
		D3DUSAGE_WRITEONLY,					// ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÃégÔøΩpÔøΩ@ÔøΩ@
		D3DFMT_INDEX16,						// ÔøΩgÔøΩpÔøΩÔøΩÔøΩÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩtÔøΩHÔøΩ[ÔøΩ}ÔøΩbÔøΩg
		D3DPOOL_MANAGED,					// ÔøΩÔøΩÔøΩ\ÔøΩ[ÔøΩXÔøΩÃÉoÔøΩbÔøΩtÔøΩ@ÔøΩÔøΩ€éÔøΩÔøΩÔøΩÔøΩÈÉÅÔøΩÔøΩÔøΩÔøΩÔøΩNÔøΩÔøΩÔøΩXÔøΩÔøΩÔøΩwÔøΩÔøΩ
		&pMesh->pD3DIdxBuff,				// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩCÔøΩÔøΩÔøΩ^ÔøΩ[ÔøΩtÔøΩFÔøΩ[ÔøΩXÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^
		NULL)))								// NULLÔøΩ…ê›íÔøΩ
	{
		return E_FAIL;
	}

	{//ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÃíÔøΩÔøΩgÔøΩñÑÇﬂÇÔøΩ
		VERTEX_3D *pVtx;
#if 0
		const float texSizeX = 1.0f / g_nNumBlockX;
		const float texSizeZ = 1.0f / g_nNumBlockY;
#else
		const float texSizeX = 1.0f;
		const float texSizeZ = 1.0f;
#endif

		// ÔøΩÔøΩÔøΩ_ÔøΩfÔøΩ[ÔøΩ^ÔøΩÃîÕàÕÇÔøΩÔøΩÔøΩÔøΩbÔøΩNÔøΩÔøΩÔøΩAÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^ÔøΩÔøΩÔøΩÊìæ
		pMesh->pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

		for (int nCntVtxY = 0; nCntVtxY < (pMesh->nNumBlockY + 1); nCntVtxY++)
		{
			for (int nCntVtxX = 0; nCntVtxX < (pMesh->nNumBlockX + 1); nCntVtxX++)
			{
				// ÔøΩÔøΩÔøΩ_ÔøΩÔøΩÔøΩWÔøΩÃê›íÔøΩ
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].vtx.x = -(pMesh->nNumBlockX / 2.0f) * pMesh->fBlockSizeX + nCntVtxX * pMesh->fBlockSizeX;
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].vtx.y = pMesh->nNumBlockY * pMesh->fBlockSizeY - nCntVtxY * pMesh->fBlockSizeY;
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].vtx.z = 0.0f;

				// ÔøΩ@ÔøΩÔøΩÔøΩÃê›íÔøΩ
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].nor = D3DXVECTOR3(-1.0f, 0.0f, -1.0f);

				// ÔøΩÔøΩÔøΩÀåÔøΩÔøΩÃê›íÔøΩ
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].diffuse = col;

				// ÔøΩeÔøΩNÔøΩXÔøΩ`ÔøΩÔøΩÔøΩÔøΩÔøΩWÔøΩÃê›íÔøΩ
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].tex.x = texSizeX * nCntVtxX;
				pVtx[nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX].tex.y = texSizeZ * nCntVtxY;
			}
		}

		// ÔøΩÔøΩÔøΩ_ÔøΩfÔøΩ[ÔøΩ^ÔøΩÔøΩÔøΩAÔøΩÔøΩÔøΩÔøΩÔøΩbÔøΩNÔøΩÔøΩÔøΩÔøΩ
		pMesh->pD3DVtxBuff->Unlock();
	}

	{//ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÃíÔøΩÔøΩgÔøΩñÑÇﬂÇÔøΩ
		WORD *pIdx;

		// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩfÔøΩ[ÔøΩ^ÔøΩÃîÕàÕÇÔøΩÔøΩÔøΩÔøΩbÔøΩNÔøΩÔøΩÔøΩAÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩ÷ÇÃÉ|ÔøΩCÔøΩÔøΩÔøΩ^ÔøΩÔøΩÔøΩÊìæ
		pMesh->pD3DIdxBuff->Lock(0, 0, (void**)&pIdx, 0);

		int nCntIdx = 0;
		for (int nCntVtxY = 0; nCntVtxY < pMesh->nNumBlockY; nCntVtxY++)
		{
			if (nCntVtxY > 0)
			{// ÔøΩkÔøΩﬁÉ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩÃÇÔøΩÔøΩﬂÇÃÉ_ÔøΩuÔøΩÔøΩÃê›íÔøΩ
				pIdx[nCntIdx] = (nCntVtxY + 1) * (pMesh->nNumBlockX + 1);
				nCntIdx++;
			}

			for (int nCntVtxX = 0; nCntVtxX < (pMesh->nNumBlockX + 1); nCntVtxX++)
			{
				pIdx[nCntIdx] = (nCntVtxY + 1) * (pMesh->nNumBlockX + 1) + nCntVtxX;
				nCntIdx++;
				pIdx[nCntIdx] = nCntVtxY * (pMesh->nNumBlockX + 1) + nCntVtxX;
				nCntIdx++;
			}

			if (nCntVtxY < (pMesh->nNumBlockY - 1))
			{// ÔøΩkÔøΩﬁÉ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩÃÇÔøΩÔøΩﬂÇÃÉ_ÔøΩuÔøΩÔøΩÃê›íÔøΩ
				pIdx[nCntIdx] = nCntVtxY * (pMesh->nNumBlockX + 1) + pMesh->nNumBlockX;
				nCntIdx++;
			}
		}

		// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩfÔøΩ[ÔøΩ^ÔøΩÔøΩÔøΩAÔøΩÔøΩÔøΩÔøΩÔøΩbÔøΩNÔøΩÔøΩÔøΩÔøΩ
		pMesh->pD3DIdxBuff->Unlock();
	}

	return S_OK;
}

//=============================================================================
// ÔøΩIÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
//=============================================================================
void UninitMeshWall(void)
{
	MESH_WALL *pMesh;
	int nCntMeshField;

	for (nCntMeshField = 0; nCntMeshField < g_nNumMeshField; nCntMeshField++)
	{
		pMesh = &g_aMeshWall[nCntMeshField];

		if (pMesh->pD3DVtxBuff)
		{// ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÃäJÔøΩÔøΩ
			pMesh->pD3DVtxBuff->Release();
			pMesh->pD3DVtxBuff = NULL;
		}

		if (pMesh->pD3DIdxBuff)
		{// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÃäJÔøΩÔøΩ
			pMesh->pD3DIdxBuff->Release();
			pMesh->pD3DIdxBuff = NULL;
		}
	}

	if (g_pD3DTexture)
	{// ÔøΩeÔøΩNÔøΩXÔøΩ`ÔøΩÔøΩÔøΩÃäJÔøΩÔøΩ
		g_pD3DTexture->Release();
		g_pD3DTexture = NULL;
	}
}

//=============================================================================
// ÔøΩXÔøΩVÔøΩÔøΩÔøΩÔøΩ
//=============================================================================
void UpdateMeshWall(void)
{
}

//=============================================================================
// ÔøΩ`ÔøΩÊèàÔøΩÔøΩ
//=============================================================================
void DrawMeshWall(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	D3DXMATRIX mtxRot, mtxTranslate;

	MESH_WALL *pMesh;
	int nCntMeshField;

	for (nCntMeshField = 0; nCntMeshField < g_nNumMeshField; nCntMeshField++)
	{
		pMesh = &g_aMeshWall[nCntMeshField];

		// ÔøΩÔøΩÔøΩ[ÔøΩÔøΩÔøΩhÔøΩ}ÔøΩgÔøΩÔøΩÔøΩbÔøΩNÔøΩXÔøΩÃèÔøΩÔøΩÔøΩÔøΩÔøΩ
		D3DXMatrixIdentity(&pMesh->mtxWorld);

		// ÔøΩÔøΩ]ÔøΩîΩâf
		D3DXMatrixRotationYawPitchRoll(&mtxRot, pMesh->rot.y, pMesh->rot.x, pMesh->rot.z);
		D3DXMatrixMultiply(&pMesh->mtxWorld, &pMesh->mtxWorld, &mtxRot);

		// ÔøΩ⁄ìÔøΩÔøΩîΩâf
		D3DXMatrixTranslation(&mtxTranslate, pMesh->pos.x, pMesh->pos.y, pMesh->pos.z);
		D3DXMatrixMultiply(&pMesh->mtxWorld, &pMesh->mtxWorld, &mtxTranslate);

		// ÔøΩÔøΩÔøΩ[ÔøΩÔøΩÔøΩhÔøΩ}ÔøΩgÔøΩÔøΩÔøΩbÔøΩNÔøΩXÔøΩÃê›íÔøΩ
		pDevice->SetTransform(D3DTS_WORLD, &pMesh->mtxWorld);

		// ÔøΩÔøΩÔøΩ_ÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ_ÔøΩÔøΩÔøΩÔøΩÔøΩOÔøΩpÔøΩCÔøΩvÔøΩÔøΩÔøΩCÔøΩÔøΩÔøΩ…ê›íÔøΩ
		pDevice->SetStreamSource(0, pMesh->pD3DVtxBuff, 0, sizeof(VERTEX_3D));

		// ÔøΩCÔøΩÔøΩÔøΩfÔøΩbÔøΩNÔøΩXÔøΩoÔøΩbÔøΩtÔøΩ@ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ_ÔøΩÔøΩÔøΩÔøΩÔøΩOÔøΩpÔøΩCÔøΩvÔøΩÔøΩÔøΩCÔøΩÔøΩÔøΩ…ê›íÔøΩ
		pDevice->SetIndices(pMesh->pD3DIdxBuff);

		// ÔøΩÔøΩÔøΩ_ÔøΩtÔøΩHÔøΩ[ÔøΩ}ÔøΩbÔøΩgÔøΩÃê›íÔøΩ
		pDevice->SetFVF(FVF_VERTEX_3D);

		// ÔøΩeÔøΩNÔøΩXÔøΩ`ÔøΩÔøΩÔøΩÃê›íÔøΩ
		pDevice->SetTexture(0, g_pD3DTexture);

		// ÔøΩ|ÔøΩÔøΩÔøΩSÔøΩÔøΩÔøΩÃï`ÔøΩÔøΩ
		pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, 0, pMesh->nNumVertex, 0, pMesh->nNumPolygon);
	}
}

